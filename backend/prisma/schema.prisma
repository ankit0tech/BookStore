// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  user
  admin
  superadmin
}

model userinfo {
  id Int @id @default(autoincrement())
  email String @unique @db.VarChar(255)
  first_name String?
  last_name String?
  password String?
  googleId String? @unique
  provider String @default("email")
  role Role @default(user)
  verified Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart cart[]
  address address[]
  review review[]
  wishlist wishlist[]
  recently_viewed recently_viewed[]

  category_created category[] @relation("creator")
  category_updated category[] @relation("updator")
}

model book {
  id Int @id @default(autoincrement())
  title String
  author String
  publish_year Int
  price Int
  category_id Int?
  category category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  average_rating Decimal @db.Decimal(3,2) @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cover_image String @db.VarChar(2083) @default("")

  cart cart[]
  review review[]
  wishlist wishlist[]
  recently_viewed recently_viewed[]
  book_stats book_stats[]
  special_offers special_offers[] @relation("BookOnOffer")
}

model book_stats {
  book_id Int @id
  purchase_count Int @default(0)
  book book @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model special_offers {
  id Int @id @default(autoincrement())
  discount_percentage Int
  offer_type String
  description String
  offer_valid_from DateTime
  offer_valid_until DateTime

  books book[] @relation("BookOnOffer")
}

model category {
  id Int @id @default(autoincrement())
  title String
  parent_id Int?
  created_by Int @default(-1)
  updated_by Int?

  parent category? @relation("CategoryParent", fields: [parent_id], references: [id], onDelete: Cascade)
  sub_category category[] @relation("CategoryParent")

  creator userinfo @relation("creator", fields: [created_by], references: [id], onDelete: SetDefault)
  updator userinfo? @relation("updator", fields: [updated_by], references: [id])

  book book[]
}

model cart {
  id Int @id @default(autoincrement())
  
  user_id Int
  user userinfo @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book_id Int
  book book @relation(fields: [book_id], references: [id], onDelete: Cascade)

  quantity Int @default(1)
  purchased Boolean @default(false)
  purchase_date DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model address {
  id Int @id @default(autoincrement())

  user_id Int
  user userinfo @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  street_address String @db.VarChar(255)
  city String @db.VarChar(255)
  state String? @db.VarChar(255)
  zip_code String
  country String
  is_default Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])  // Optional for querying purposes
}

model wishlist {
  id Int @id @default(autoincrement())
  user_id Int
  user userinfo @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book_id Int
  book book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, book_id])
}

model review {
  id Int @id @default(autoincrement())
  user_id Int
  user userinfo @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book_id Int
  book book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  rating Int
  review_text String @db.VarChar(5000)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, book_id])
}

model recently_viewed {
  id Int @id @default(autoincrement())
  user_id Int
  user userinfo @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book_id Int
  book book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, book_id])
}